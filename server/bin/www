#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('server:server');
var http = require('http');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);
const io = require('socket.io')(server);


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}


/**
 * 监听连接成功
 */

//在线用户,当前在线人数
let onlineUser = {};
let onlineCount = 0;
io.on('connection', (socket) => {
  console.log('连接成功');
  //接受客户端的消息
  console.log(socket.id);
  socket.emit('open');
  socket.on('setRoom', function(obj) {
    //将新加入用户的唯一标识当作socket的名称，后面退出的时候会用到,检查在线列表，如果不在里面就加入
    if (!onlineUser.hasOwnProperty(obj.from)) {
      onlineUser[obj.from] = socket;
      //在线人数+1
      onlineCount++;
      if(!onlineUser.hasOwnProperty(obj.to)) {
        socket.emit('noOnline','当前用户不在线');
      }else {
        socket.emit('online','在线');
      }
    }else{
      console.log(111);
    }
    console.log(onlineCount);
  });
  socket.on('sendTo', function (data) {
    console.log(data);
    //向指定用户发消息
    let toName = data.to;
    if(onlineUser[toName]){
      onlineUser[toName].emit('message',{
        from: data.from,
        to:toName,
        userHead: data.userHead,
        message: data.message,
        liClass: 'you',
        imgClass: 'youHead',
        spanClass: 'youMsg'
      });
    }else {
      socket.emit('noOnline','当前用户不在线');
    }
  //监听连接关闭
  socket.on('disconnect', () => {
    console.log("连接已经关闭");
  });
})
});
